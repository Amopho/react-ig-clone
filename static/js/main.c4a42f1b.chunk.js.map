{"version":3,"sources":["components/InfiniteList.js","App.js","index.js"],"names":["divStyle","color","height","textAlign","padding","background","marginTop","containerStyle","maxWidth","margin","InfiniteScroll","useState","list","postList","setPostList","page","setPage","loader","useRef","useEffect","observer","IntersectionObserver","handleObserver","root","rootMargin","threshold","current","observe","newList","concat","entities","isIntersecting","className","style","map","post","index","ref","App","state","setState","InfiniteList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gLAEMA,EAAW,CACfC,MAAO,OACPC,OAAQ,QACRC,UAAW,SACXC,QAAS,WACTC,WAAY,OACZC,UAAW,QAGPC,EAAiB,CACrBC,SAAU,SACVC,OAAQ,UA4DKC,EA1DQ,WACrB,MAAgCC,mBAAS,CACvCC,KAAM,CAAC,EAAG,EAAG,EAAG,KADlB,mBAAOC,EAAP,KAAiBC,EAAjB,KAIA,EAAwBH,mBAAS,GAAjC,mBAAOI,EAAP,KAAaC,EAAb,KAEMC,EAASC,iBAAO,MAEtBC,qBAAU,WACR,IAOMC,EAAW,IAAIC,qBAAqBC,EAP5B,CACZC,KAAM,KACNC,WAAY,OACZC,UAAW,IAKTR,EAAOS,SACTN,EAASO,QAAQV,EAAOS,WAEzB,IAEHP,qBAAU,WAER,IAAMS,EAAUf,EAASD,KAAKiB,OAAO,CAAC,EAAG,EAAG,EAAG,IAC/Cf,EAAY,CACVF,KAAMgB,MAEP,CAACb,IAIJ,IAAMO,EAAiB,SAACQ,GACPA,EAAS,GACbC,gBACTf,GAAQ,SAACD,GAAD,OAAUA,EAAO,MAG7B,OACE,qBAAKiB,UAAU,YAAYC,MAAO1B,EAAlC,SACE,sBAAKyB,UAAU,YAAf,UACGnB,EAASD,KAAKsB,KAAI,SAACC,EAAMC,GACxB,OACE,qBAAiBJ,UAAU,OAAOC,MAAOjC,EAAzC,SACE,mCAAMmC,EAAN,QADQC,MAMd,qBAAKJ,UAAU,UAAUK,IAAKpB,EAA9B,SACE,mDCnDKqB,MAVf,WACE,MAA0B3B,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcC,EAAd,KAEA,OACE,qBAAKR,UAAU,MAAf,SACE,cAACS,EAAD,CAAcF,MAAOA,EAAOC,SAAUA,OCN5CE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c4a42f1b.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nconst divStyle = {\n  color: \"blue\",\n  height: \"250px\",\n  textAlign: \"center\",\n  padding: \"5px 10px\",\n  background: \"#eee\",\n  marginTop: \"15px\",\n};\n\nconst containerStyle = {\n  maxWidth: \"1280px\",\n  margin: \"0 auto\",\n};\nconst InfiniteScroll = () => {\n  const [postList, setPostList] = useState({\n    list: [1, 2, 3, 4],\n  });\n  // tracking on which page we currently are\n  const [page, setPage] = useState(1);\n  // add loader refrence\n  const loader = useRef(null);\n\n  useEffect(() => {\n    var options = {\n      root: null,\n      rootMargin: \"20px\",\n      threshold: 1.0,\n    };\n    // initialize IntersectionObserver\n    // and attaching to Load More div\n    const observer = new IntersectionObserver(handleObserver, options);\n    if (loader.current) {\n      observer.observe(loader.current);\n    }\n  }, []);\n\n  useEffect(() => {\n    // here we simulate adding new posts to List\n    const newList = postList.list.concat([1, 1, 1, 1]);\n    setPostList({\n      list: newList,\n    });\n  }, [page]);\n\n  // here we handle what happens when user scrolls to Load More div\n  // in this case we just update page variable\n  const handleObserver = (entities) => {\n    const target = entities[0];\n    if (target.isIntersecting) {\n      setPage((page) => page + 1);\n    }\n  };\n  return (\n    <div className=\"container\" style={containerStyle}>\n      <div className=\"post-list\">\n        {postList.list.map((post, index) => {\n          return (\n            <div key={index} className=\"post\" style={divStyle}>\n              <h2> {post} </h2>\n            </div>\n          );\n        })}\n        {/* <!-- Add Ref to Load More div --> */}\n        <div className=\"loading\" ref={loader}>\n          <h2>Load More</h2>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InfiniteScroll;\n","import { useState } from \"react\";\nimport React from \"react\";\n// import { useState } from \"react\";\nimport InfiniteList from \"./components/InfiniteList\";\n\nfunction App() {\n  const [state, setState] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <InfiniteList state={state} setState={setState} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}